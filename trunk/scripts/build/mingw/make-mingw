#!/bin/sh

# make-mingw - build the mingw binary distribution
# Copyright (C) 2002, 2003
# Craig Franklin
# 
# This file is part of gputils.
# 
# gputils is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
# 
# gputils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with gputils; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# This script has allot of extras which will probably never be used.  It was
# originally intended to generate binaries for any OS, but that is unnecessary.
# The only binaries we are generating are for mingw or rpm. rpm is handled 
# elsewhere, so this script only has to take care of mingw.

# Options for the system on which the package will run.
if test "$CC" == ""
then
  CC=i386-mingw32msvc-gcc      
fi
if test "$CFLAGS" == ""
then
  CFLAGS="-s -O2"
fi

distname="mingw32"
host=i386-mingw32msvc

if expr "$(unix2dos -q < /dev/null 2>&1)" : '.*-q: unknown option' >/dev/null
then
  UNIX2DOS="unix2dos"
else
  UNIX2DOS="unix2dos -q"
fi

# autoconf can't test cross compilers, so set the variables in the configure
# command line.
config_options="ac_cv_func_malloc_0_nonnull=yes \
                ac_cv_func_realloc_0_nonnull=yes"
doc="gputils.pdf"
comments="None. "
delete_dir="lib man include"
common="AUTHORS COPYING ChangeLog NEWS README"
use_zip=yes 
clean=yes

print_banner()
{
  # Test syntax.
  if [ $# = 0 ] ; then
    echo "Usage: printbanner \"message\""
    exit 1
  fi
  dashes=`echo "$1" | sed s/./=/g`; \
  echo "$dashes"; \
  echo "$1"; \
  echo "$dashes"
  return 0
}

data_file () 
{
  echo "======================================================================"
  echo "gputils Binary Distribution"
  echo "======================================================================"
  echo "Maintainer:  $NAME" 
  echo "Email:       $EMAIL"
  echo "Date:        $(date +%x)"
  echo "Host:        $host"
  echo "Src version: $version"
  echo "======================================================================"
  echo "Comments:"
  echo "$comments"
  echo
  echo "======================================================================"
  echo "Notes:"
  echo "This is a binary gputils distribution.  This file was not necessarily"
  echo "generated by the gputils project.  It was generated by the maintainer" 
  echo "listed above.  If you have any problems with the distribution, contact"
  echo "the maintainer first."
  echo " "
  echo "The gputils sourcecode and support are available at:"
  echo "<URL:http://gputils.sourceforge.net/>"
  echo
  echo "======================================================================"
}

################################################################################
# process options
################################################################################

for ac_option
do

  # If the previous option needs an argument, assign it.
  if test -n "$ac_prev"; then
    eval "$ac_prev=\$ac_option"
    ac_prev=
    continue
  fi

  case "$ac_option" in
  -*=*) ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) ac_optarg= ;;
  esac

  case "$ac_option" in
  --build=*)
    build="$ac_optarg" 
    ;;

  --release=*)
    release="$ac_optarg" 
    ;;

  --email=*)
    EMAIL="$ac_optarg" 
    ;;

  --help)
    cat << EOF
Usage: make-mingw [options]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
  --email=EMAIL           email address of the maintainer
  --name=NAME             name of the maintainer
  --save-temps            leave temporary directories
Directory and file names:
  --release=NUMBER        release number of the distribution [none]
  --patch=PATCH           patch applied to source
  --source=SRCFILENAME    name of the source file
Host type:
  --build=BUILD           configure for building on BUILD [guessed]

EOF
    exit 0 
    ;;

  --save-temps)
    clean=no 
    ;;

  --name=*)
    NAME="$ac_optarg" 
    ;;

  --source=*)
    srcfilename="$ac_optarg" 
    ;;

  --patch=*)
    patch="$ac_optarg" 
    ;;

  *)
    echo "invalid option, use --help to show usage" 
    exit 1
    ;;

  esac

done

################################################################################
# extract files from source archive
################################################################################

if [ ! $srcfilename ]; then
  echo "error: specify source filename using --source=FILENAME"
  exit 1
elif [ ! -f $srcfilename ]; then
  echo "$srcfilename: No such file"
  exit 1
else
  # determine the src directory and version  and 
  version=`echo $srcfilename | sed -e 's%.tar.gz%%g'`
  ver=`echo $srcfilename | sed -e 's%gputils-\(.*\)\.tar\.gz%\1%'`
  ver_major=`echo $ver|awk 'BEGIN {FS="."} {print $1}'`
  ver_minor=`echo $ver|awk 'BEGIN {FS="."} {print $2}'`
  ver_revision=`echo $ver|awk 'BEGIN {FS="."} {print $3}'`
  ver_build=0
  # extract the files
  rm -Rf $version
  tar -zxf $srcfilename
  # make the distribution directory
  root_dir="`pwd`"
  dist_dir="`pwd`/dist"
  rm -Rf $dist_dir
  mkdir -p $dist_dir/gputils
fi

# copy the patch to the distribution and patch the source
if [ $patch ]; then
  if [ -f $patch ]; then
    echo "copying patch to binary distribution... $patch.  "
    cp $patch $dist_dir/gputils
    echo "patching source..."
    patch -p0 < $patch
  else
    echo "error: patch file \"$patch\" not found."
    exit 1;
  fi
fi

# change to the source directory
if [ -d $version ]; then
  cd $version
  echo "changing to source directory... $version"
else  
  echo "error: directory $version not found"
  exit 1
fi

################################################################################
# check the options
################################################################################

# Define the host system (mingw) 
config_options="$config_options --host=$host"
echo "checking host system type... $host"

# Detect the system that the distribution to be built on. 
if [ ! $build ]; then
  build=`./config.guess`
fi
config_options="$config_options --build=$build"
echo "checking build system type... $build"

echo "checking maintainer name... $NAME"

echo "checking maintainer email address... $EMAIL"

# if release is not specified use "1"
dash_release=""
if [ $release ]; then
  dash_release="-$release"
fi
echo "checking distribution dash number... $dash_release"

# generate the complete distribution name
distname="$version-$distname$dash_release"

echo "checking distribution name... $distname"

################################################################################
# compile the project and install files to the distribution directory
################################################################################

print_banner "Configuring project"
CC=$CC CFLAGS=$CFLAGS GPUTILS_HTMLDOC_PATH=$dist_dir/gputils/doc/html-help ./configure --prefix=$dist_dir/gputils --datadir=$dist_dir \
  $config_options
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
  echo "error: configuring gputils failed"
  exit 1
fi

print_banner "Compiling project"
make
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
  echo "error: compiling gputils failed"
  exit 1
fi

print_banner "Installing files"
make install
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
  echo "error: gputils install failed"
  exit 1
fi
 
print_banner "Copying project data to distribution directory"
# copy the common files
for x in $common
  do
    cp $x $dist_dir/gputils/$x.txt
    $UNIX2DOS $dist_dir/gputils/$x.txt
  done
echo "copying project data... $common"

# copy the docs
mkdir $dist_dir/gputils/doc
for x in $doc
  do
    cp ./doc/$x $dist_dir/gputils/doc
  done
echo "copying project documents... $doc"

# remove unnecessary directories
for x in $delete_dir
  do
    rm -Rf $dist_dir/gputils/$x
  done
echo "removing directories... $delete_dir"

# generate the binary distribution data file
data_file > $dist_dir/gputils/DISTRIBUTION.txt
$UNIX2DOS $dist_dir/gputils/DISTRIBUTION.txt
echo "creating binary data file... DISTRIBUTION.txt"

# copy the NSIS script and icon
cp $root_dir/gputils.nsi $dist_dir/gputils/gputils.nsi
echo "copying NSIS script... gputils.nsi"

# convert the remaining project data to dos format
$UNIX2DOS $dist_dir/gputils/header/*
$UNIX2DOS $dist_dir/gputils/lkr/*
echo "converting project data to DOS format... done"

################################################################################
# make the archive
################################################################################

cd $dist_dir

if test x$use_zip = xyes; then
  filename="$distname.zip"
  zip -r $filename gputils 
else
  filename="$distname.tar.gz"
  tar -zcvf $filename gputils
fi

if [ -f $filename ]; then
  mv $filename ..
  print_banner "$filename ready for distribution"
fi

# clean the dist and src directories
cd ..
if test x$clean = xyes; then
  rm -Rf $version
  rm -Rf $dist_dir 
fi

case `uname` in
*MINGW*)  ac_win32=1 ;;
*CYGWIN*) ac_win32=1 ;;
*)        ac_win32=0 ;;
esac

if [ $ac_win32 ]; then
  cd dist/gputils
  "c:/Program Files/NSIS/makensis" -DVER_MAJOR=$ver_major -DVER_MINOR=$ver_minor -DVER_REVISION=$ver_revision -DVER_BUILD=$ver_build -DDASH_RELEASE="" gputils.nsi
fi

exit
